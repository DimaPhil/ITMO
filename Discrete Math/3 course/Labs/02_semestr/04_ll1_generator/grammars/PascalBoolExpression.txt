@header {import java.awt.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
}

@members {
    public class Tree {
        String node;
        List<Tree> children = new ArrayList<>();

        public Tree(String node, Tree... children) {
            this.node = node;
            this.children = Arrays.asList(children);
        }

        public Tree(String node) {
            this.node = node;
        }

        private static final int width = 110;
        private static final int height = 15;

        int[] draw(Graphics g, int x[], int y) {
            List<Integer> cx = new ArrayList<>();
            List<Integer> cy = new ArrayList<>();

            for (Tree child : children) {
                if (child == null) {
                    continue;
                }
                int[] result = child.draw(g, x, y + 30);
                cx.add(result[0]);
                cy.add(result[1]);
            }

            int wx, wy;
            if (cx.isEmpty()) {
                wx = x[0];
                wy = y;
                x[0] += 110;
            } else {
                wx = (cx.get(0) + cx.get(cx.size() - 1) - width) / 2;
                wy = y;
            }
            g.drawRect(wx, wy, width, height);
            if (cx.isEmpty()) {
                g.setColor(Color.green);
                g.fillRect(wx, wy, width, height);
                g.setColor(Color.BLACK);
            }
            g.drawString(node, wx + 3, wy + height - 3);
            for (int i = 0; i < cx.size(); i++) {
                g.drawLine(wx + width / 2, wy + height, cx.get(i), cy.get(i));
            }
            return new int[]{wx + width / 2, wy};
        }
    }
}

pascal_expression returns [ Tree ] : expression { $pascal_expression.tree = new Tree("pascal_expression", $expression.tree); return $pascal_expression.tree; } ;

expression returns [ Tree ] : summand expression_prime { return new Tree("expression", $summand.tree, $expression_prime.tree); } ;
expression_prime returns [ Tree ] : OR summand expression_prime { return new Tree("expression_prime", new Tree("OR"), $summand.tree, $expression_prime.tree); } | XOR summand expression_prime { return new Tree("expression_prime", new Tree("XOR"), $summand.tree, $expression_prime.tree); } | ;

summand returns [ Tree ] : and summand_prime { return new Tree("summand", $and.tree, $summand_prime.tree); };
summand_prime returns [ Tree ] : AND and summand_prime { return new Tree("summand_prime", new Tree("AND"), $and.tree, $summand_prime.tree); }| ;

and returns [ Tree ] :  VAR  { return new Tree("and", new Tree("VAR")); } | NOT and { return new Tree("and", new Tree("NOT"), $and.tree); } |  LEFT_PAREN expression RIGHT_PAREN { return new Tree("and", new Tree("("), $expression.tree, new Tree(")")); };

VAR : 'a' | 'b' | 'c' | 'd' ;
AND : 'and' ;
OR : 'or' ;
XOR : 'xor' ;
NOT : 'not' ;
LEFT_PAREN : '(';
RIGHT_PAREN : ')';
